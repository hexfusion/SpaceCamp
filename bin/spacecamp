#!/bin/bash
set -e

USE_COMPACT=y
USE_COMPACT=

BUILD_COMPACT=$USE_COMPACT

spacecamp=/home/spacecamp/applications/SpaceCamp

# create
function mount_f {
    what=$1
    where=$2
    type=$3
    options=$4

    echo "mount -t $type -o$options $what $where"

    sdname=$(systemd-escape -p $where || true)
    unitfile="[Unit]\nDescription=Spacecamp container overlay mount\n\n \
    [Mount]\nWhat=$what\nWhere=$where\nType=$type\nOptions=$options\n\n \
    [Install]\nWantedBy = multi-user.target"

    printf "$unitfile" > /etc/systemd/system/$sdname.mount

    systemctl daemon-reload
    systemctl enable "$sdname.mount"
    systemctl start "$sdname.mount"
}

function __launch {
    _machine=$1

    systemctl daemon-reload
    systemctl enable "var-lib-machines-$_machine.mount"
    systemctl start "var-lib-machines-$_machine.mount"

    systemctl enable "systemd-nspawn@$_machine"
    systemctl start "systemd-nspawn@$_machine"
}

function umount_f {
    where=$1

    sdname=$(systemd-escape -p $where || true)

    systemctl stop $sdname.mount
}

function mount_overlay {
    _what_rw=$1
    _what_wk=$2
    _where=$3

    mount_f overlay $_where overlay lowerdir=$basedir,upperdir=$_what_rw,workdir=$_what_wk
}

function __mount {
    echo "ID $id"
    echo "FROM $base"

    _rwdir=/var/lib/container/$id/rw
    _workdir=/var/lib/container/$id/work
    _machinedir=/var/lib/machines/$id

    mkdir -p $_rwdir $_workdir $_machinedir

    mount_overlay "$_rwdir" "$_workdir" "$_machinedir"
}

function __umount {
    umount_f "$root"
}

echo $(basename "$0")
if [ $(basename "$0") = "spacecamp" ]
then
    if [ -n "$1" ]
    then
        case "$1" in
            build)
                if [ -n "$2" ]
                then
                    path=$2
                else
                    path="."
                fi
                build/$path/build.sh $3
                exit $? ;;
            launch)
                if [ -n "$2" ]
                then
                    machine=$2
                    __launch $machine
                fi
                exit 0 ;;
            new) # New container
                id=$2
                base=$3
                __mount
                exit 0 ;;
        esac
    fi
    echo "Usage: $0 build/tag/new"
    exit 1
fi

src=$( cd "$( dirname "$0" )" && pwd )
cd $src

id=""
base=""

function ID {
    name=$1
    version=$2

    id=$name$version
    root=/var/lib/machines/$id
    sroot=/var/lib/container/$id

    mkdir -m 0755 -p $root

    __mount
}

function FROM {
    base=$1
    basedir=/var/lib/container/base/$base
 
    if [ ! -d $basedir ]
    then
        echo "Base image not found: $base"
        exit 1
    fi

    # Enable ID <-> FROM reversal
    if [ -n "$id" ]
    then
        __mount
    fi
}

# mount the local apt cache to save time downloading packages
function RUN {
    echo systemd-nspawn --bind /var/cache/apt/archives/ -M $id "$@"
    systemd-nspawn --bind /var/cache/apt/archives/ -M $id "$@"
}

function __sd_unit_name {
    if [[ "$1" == *.service ]] || [[ "$1" == *.socket ]]
    then
        echo $1
    else
        echo $1.service
    fi
}

function __sd_add_unit {
    cp $1 $root/lib/systemd/system/
}

function ADD_UNIT {
    sd_name=$(__sd_unit_name $1)

    __sd_add_unit $sd_name
}

function ENABLE {
    sd_name=$(__sd_unit_name $1)

    if [ -f $sd_name ]
    then
        __sd_add_unit $sd_name
    fi

    RUN systemctl enable $sd_name
}

function SET {
    echo $2 > $root/$1
}

storeargs() {
    printf "%q " "$@"
}

function CMD {
    storeargs exec "$@" > $root/run.sh
    chmod u+x $root/run.sh
}

function __cleanup_systemd {
    if [ "$(ls -A $sroot/etc/systemd/system 2>/dev/null || true)" ]
    then
        cp -r $sroot/etc/systemd/system/* $sroot/lib/systemd/system/
        rm -rf $sroot/etc/systemd/system
    fi
}

function __save_settings {
    echo $version > $sroot/version
    if [ -n "$base" ]
    then
        echo $id:$base_overlay > $sroot/overlay
    else
       echo $id > $sroot/overlay
    fi
}

function __atEXIT {
    __umount
    __cleanup_systemd
    __save_settings
    if [ -n "$BUILD_COMPACT" ]
    then
        __compact
    fi
}

trap __atEXIT EXIT
